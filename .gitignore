Michaelusky
michaelusky
Living life like a Pastel Sabrio

11b_shrink ‚Äî 24/06/2024 21:50
from flask import Flask
from flasksqlalchemy import SQLAlchemy
from config import Config

db = SQLAlchemy()

def createapp():
    app = Flask(__name)
    app.config.from_object(Config)

    db.init_app(app)

    # Import and register blueprints
    # from src.routes import main as main_blueprint
    # app.register_blueprint(main_blueprint)

    return app
Luis_ma ‚Äî 24/06/2024 21:52
""" Initialize the Flask app. """

from flask import Flask
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy

cors = CORS()


def create_app(config_class="src.config.DevelopmentConfig") -> Flask:
    """
    Create a Flask app with the given configuration class.
    The default configuration class is DevelopmentConfig.
    """
    app = Flask(__name__)
    app.url_map.strict_slashes = False

    app.config.from_object(config_class)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///development.db'
    db = SQLAlchemy(app)

    register_extensions(app)
    register_routes(app)
    register_handlers(app)

    return app
 
Michaelusky ‚Äî 25/06/2024 23:26
Traceback (most recent call last):
  File "/home/michael/Holberton/holbertonschool-hbnb-db/hbnb.py", line 5, in <module>
    app = create_app()
  File "/home/michael/Holberton/holbertonschool-hbnb-db/src/routes/__init__.py", line 23, in create_app
    register_routes(app)
  File "/home/michael/Holberton/holbertonschool-hbnb-db/src/routes/__init__.py", line 38, in register_routes
    from src.routes.users import users_bp
  File "/home/michael/Holberton/holbertonschool-hbnb-db/src/routes/users.py", line 6, in <module>
    from src.controllers.users import (
  File "/home/michael/Holberton/holbertonschool-hbnb-db/src/controllers/users.py", line 6, in <module>
    from src.models.user import User
  File "/home/michael/Holberton/holbertonschool-hbnb-db/src/models/user.py", line 5, in <module>
    from src.models.base import Base, db
  File "/home/michael/Holberton/holbertonschool-hbnb-db/src/models/base.py", line 11, in <module>
    db = SQLAlchemy(app)
  File "/home/michael/.local/lib/python3.10/site-packages/flask_sqlalchemy/extension.py", line 278, in __init__
    self.init_app(app)
  File "/home/michael/.local/lib/python3.10/site-packages/flask_sqlalchemy/extension.py", line 311, in init_app
    if "sqlalchemy" in app.extensions:
AttributeError: module 'flask.app' has no attribute 'extensions
 
Luis_ma ‚Äî 25/06/2024 23:27
`
 from src impor db 
 
Michaelusky ‚Äî 03/07/2024 15:53
#!/usr/bin/python3
-- Create database hbnb_prod
CREATE DATABASE IF NOT EXISTS hbnb_prod;
create_database.sql
1 KB
Super codigo secreto
Pliss no lo compartan con nadie que no sea de La Mesita
11b_shrink ‚Äî 03/07/2024 15:54
Que es eso?
Sage ‚Äî 03/07/2024 15:54
queso
Michaelusky ‚Äî 03/07/2024 16:21
Para crear una base de datos en MySQL usando la extensi√≥n de MySQL en Visual Studio Code, necesitas escribir un script SQL que defina la estructura de la base de datos y luego ejecutarlo en tu servidor MySQL. Este proceso  implica calocha y si te mueves eres gay definir las tablas, columnas y relaciones que conformar√°n tu base de datos. A continuaci√≥n, te proporciono un ejemplo b√°sico de un script SQL para crear una base de datos. @11b_shrink 
Michaelusky ‚Äî 06/07/2024 19:36
FROM python:3.12.3-slim

WORKDIR /app

COPY requirements.txt /app/

RUN apt-get update && \
    apt-get install -y \
    mariadb-server \
    mariadb-client \
    gcc \
    python3-dev \
    musl-dev \
    libmariadb-dev \
    libssl-dev \
    pkg-config && \
    rm -rf /var/lib/apt/lists/*

RUN pip install --no-cache-dir setuptools wheel

RUN pip install --no-cache-dir -r requirements.txt

COPY . .

ENV PORT 5000

EXPOSE $PORT

CMD gunicorn hbnb:app -w 2 -b 0.0.0.0:$PORT


Requirements.txt 
docker build -t hbnb_prod .
 
Crear la imagen ‚¨ÜÔ∏è 

docker run -d -p 5000:5000 --env-file .env --name hbnb2 hbnb_prod

Correr el contenedor ‚¨ÜÔ∏è 

docker ps

Verificar que el contenedor este corriendo ‚¨ÜÔ∏è
Sage ‚Äî 06/07/2024 19:41
Durisimou
Michaelusky ‚Äî 06/07/2024 19:42
flask-cors
sqlalchemy
flask-sqlalchemy
flask-JWT-Extended
flask-bcrypt
python-dotenv
mysqlclient
gunicorn


requirements.txt ‚¨ÜÔ∏è
Creo que toque algo en mi codigo y lo jodi porque no me esta haciendo los GET ni POST, ni nada.  Pero entiendo que es mi codigo
Si lo prueban y les funciona todo bien me dejan saber
Sage ‚Äî 06/07/2024 19:44
El mio funciona y arregle bugs en el repo de file
Michaelusky ‚Äî 06/07/2024 19:45
Hablas de Docker o tu Hbnb?
Sage ‚Äî 06/07/2024 19:45
hbnb
se supone que el docker run haga algo?
Michaelusky ‚Äî 06/07/2024 19:49
Entiendo que cuando pongas a correr el contenedor, para probarlo es exactamente igual que como probabamos corriendolo desde la terminal.   Lo que pasa es que no vas a tener que tenerlo abierto en la terminal
Pero ya el mio no esta haciendo nada, ni en development
Sage ‚Äî 06/07/2024 19:51
diantre
o sea, tu estas probando tu hbnb desde el contenedor de docker?
o que?
Luis_ma ‚Äî 06/07/2024 19:59
Vamos a reunirnos ma√±ana y lo arreglamos. 
Michaelusky ‚Äî 06/07/2024 20:00
Ya no, ya lo estoy probando normal
Sage ‚Äî 06/07/2024 20:01
ooh
Michaelusky ‚Äî 06/07/2024 20:02
Pero me funciona igual de ambas formas.  Por eso creo que el problema no es Docker.
Sage ‚Äî 06/07/2024 20:02
Ah bueno
Michaelusky ‚Äî 06/07/2024 20:03
Donde?
Luis_ma ‚Äî 06/07/2024 20:43
¬øD√≥nde se les hace m√°s c√≥modo? 
Michaelusky ‚Äî 06/07/2024 21:20
donde sea la verdad
Sage ‚Äî 06/07/2024 21:24
donde es donde sea?
Luis_ma ‚Äî 06/07/2024 21:36
Vamos a Starbucks.
Sage ‚Äî 06/07/2024 21:37
el de la ultima vez?
Luis_ma ‚Äî 06/07/2024 21:37
S√≠
Luis_ma ‚Äî 06/07/2024 22:55
No deber√≠a estar flask tambi√©n?
Sage ‚Äî 16/07/2024 13:09
dentro del .gitignore
# Created by https://www.toptal.com/developers/gitignore/api/python,node
# Edit at https://www.toptal.com/developers/gitignore?templates=python,node

### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
... (214 l√≠neas restantes)
Contraer
message.txt
6 KB
Michaelusky ‚Äî 16/07/2024 17:29
Use esto y ahora no me aparecen los archivos del proyecto
11b_shrink ‚Äî 16/07/2024 18:15
Sage ‚Äî 16/07/2024 18:16
Lo chequeo orita, eso fue JesusüòÇüòÇ
A mi no me salen tampoco
Pense q era yo pero ahora se q es el gitignore XD
Luis_ma ‚Äî 16/07/2024 18:49
Jajaja
Michaelusky ‚Äî 16/07/2024 18:53
Hago los push desde la terminal
ni que estuvieramos en los 1400 a.c.
Luis_ma ‚Äî 16/07/2024 19:50
Respete la terminal
Ôªø
# Created by https://www.toptal.com/developers/gitignore/api/python,node
# Edit at https://www.toptal.com/developers/gitignore?templates=python,node

### Node ###
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### Node Patch ###
# Serverless Webpack directories
.webpack/

# Optional stylelint cache

# SvelteKit build / generate output
.svelte-kit

### Python ###
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

### Python Patch ###
# Poetry local configuration file - https://python-poetry.org/docs/configuration/#local-configuration
poetry.toml

# ruff
.ruff_cache/

# LSP config files
pyrightconfig.json

# End of https://www.toptal.com/developers/gitignore/api/python,node
message.txt
6 KB